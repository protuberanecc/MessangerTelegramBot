from aiogram import Router, types, F, html
from config import ADMIN_ID
from data.tickets import TicketManager
from datetime import datetime
import pytz

router = Router()
ticket_manager = TicketManager()

KIEV_TZ = pytz.timezone("Europe/Kiev")

@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_request(message: types.Message):
    ticket_id = ticket_manager.start_ticket(message.from_user.id, message.from_user.username)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

@router.message(F.text, F.chat.id != ADMIN_ID)
async def forward_to_admin(message: types.Message):
    ticket_id = ticket_manager.get_ticket_id(message.from_user.id)
    if not ticket_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    kiev_time = datetime.now(KIEV_TZ).strftime('%H:%M - %d.%m.%Y')

    formatted_message = (
        f"–ë–æ—Ç: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ MiningGear\n\n"
        f"–î–∞—Ç–∞: {kiev_time}\n\n"
        f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket_id}\n\n"
        f"–ò–º—è —Ç–≥ –∫–ª–∏–µ–Ω—Ç–∞: @{message.from_user.username}\n\n"
        f"ID –∫–ª–∏–µ–Ω—Ç–∞: {message.from_user.id}\n\n\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    sent_msg = await message.bot.send_message(ADMIN_ID, formatted_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    ticket_manager.store_message(ticket_id, message.from_user, message.text, "–ö–ª–∏–µ–Ω—Ç")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        f'‚è≥ –û—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. \n\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–¥–µ—Ä–∂–∫–∞".'
    )

@router.message(F.reply_to_message, F.chat.id == ADMIN_ID)
async def reply_to_user(message: types.Message):
    ticket_id = ticket_manager.extract_ticket_id(message.reply_to_message.text)
    if not ticket_id:
        await message.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_id = ticket_manager.get_user_by_ticket(ticket_id)
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    await message.bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    ticket_manager.store_message(ticket_id, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", message.text, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")

@router.message(F.text.startswith("/delete_ticket"), F.chat.id == ADMIN_ID)
async def delete_ticket(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_ticket <–Ω–æ–º–µ—Ä>")
        return

    ticket_id = parts[1]
    user_id = ticket_manager.get_user_by_ticket(ticket_id)

    if not user_id:
        await message.answer(f"–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
    ticket_manager.close_ticket(ticket_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await message.bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
    await message.answer(f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–æ.")
